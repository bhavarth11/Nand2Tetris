// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //To understand code properly refer to code architecture diagram in videos 

    
    
    // First Mux which loads A register if A-instruction otherwise loads ALU output if C-instruction

    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=mux1out);

 
 
    // Logic to get loadA - must have d1 (instruction[5]) means destination A and C-instruction

    // or must have an A-instruction (instruction[15] ==0)

    And(a=instruction[15], b=instruction[5], out=destA); // C-inst with destination A

    Not(in=instruction[15], out=ainst);

    Or(a=ainst, b=destA, out=loadA);

    ARegister(in=mux1out, load=loadA , out=regAout, out[0..14]=addressM);                  //A Register



    // Mux that feeds into ALU - selects between A and M

    Mux16(a=regAout, b=inM, sel=instruction[12], out=y);

    // Logic to get loadD - must have d2 (instruction[4]) and C-instruction (instruction[15]==1)

    And(a=instruction[4], b=instruction[15],out=loadD); // C-instruction and d2==1 to loadD

    DRegister(in=ALUout, load=loadD, out=x);                          //D Register



    ALU(x=x, y=y, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);


    //PC load bit computation using jump bits of instruction and zr, ng bits of ALU

    And(a=instruction[2], b=ng, out=jump1);

    And(a=instruction[1], b=zr, out=jump2);

    Not(in=zr, out=notzr);

    Not(in=ng, out=notng);

    And(a=instruction[0], b=notzr, out=j2notzr);

    And(a=notng, b=j2notzr, out=jump3);

    Or(a=jump1, b=jump2, out=jump12);

    Or(a=jump12, b=jump3, out=jump123);

    And(a=instruction[15], b=jump123, out=loadPC);  //Jump only if it is a C-instruction (instruction[15] bit)

    PC(in=regAout, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

    
    
    // Logic to create writeM output - comes from instruction[3] and C-instruction instruction[15]

    And(a=instruction[3], b=instruction[15], out=writeM);
}