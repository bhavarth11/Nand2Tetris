/**
 * 4-bit carry look ahead adder.
 */

CHIP FullAdder4 {
    IN a[4], b[4], c0;
    OUT sum[4], carry;

    PARTS:
   // Put you code here:
   FullAdderB(a=a[0], b=b[0], c=c0, g=g0, p=p0, sum=sum[0]);
   FullAdderB(a=a[1], b=b[1], c=c1, g=g1, p=p1, sum=sum[1]);
   FullAdderB(a=a[2], b=b[2], c=c2, g=g2, p=p2, sum=sum[2]);
   FullAdderB(a=a[3], b=b[3], c=c3, g=g3, p=p3, sum=sum[3]);

   //Calculate c1
    And(a=p0, b=c0, out=c0p0);
    Or(a=g0, b=c0p0, out=c1);

    //Calculate c2
    And(a=p1, b=c0p0, out=c0p0p1);
    And(a=g0, b=p1, out=g0p1);  
    Or(a=g1, b=g0p1, out=g1_g0p1);
    Or(a=g1_g0p1, b=c0p0p1, out=c2);
    
    //Calculate c3
    And(a=c0p0p1, b=p2, out=c0p0p1p2);
    And(a=g0p1, b=p2, out=g0p1p2);
    And(a=g1, b=p2, out=g1p2);
    Or(a=g2, b=g1p2, out=g2_g1p2);
    Or(a=g0p1p2, b=c0p0p1p2, out=g0p1p2_c0p0p1p2);
    Or(a=g2_g1p2, b=g0p1p2_c0p0p1p2, out=c3);

    //Calculate c4
    And(a=c0p0p1p2, b=p3, out=c0p0p1p2p3);
    And(a=g0p1p2, b=p3, out=g0p1p2p3);
    And(a=g1p2, b=p3, out=g1p2p3);
    And(a=g2, b=p3, out=g2p3);
    Or(a=g3, b=g2p3, out=g3_g2p3);
    Or(a=g0p1p2p3, b=c0p0p1p2p3, out=g0p1p2p3_c0p0p1p2p3);
    Or(a=g3_g2p3, b=g0p1p2p3_c0p0p1p2p3, out=g3_g2p3_g0p1p2p3_c0p0p1p2p3);
    Or(a=g3_g2p3_g0p1p2p3_c0p0p1p2p3, b=g1p2p3, out=c4);
}