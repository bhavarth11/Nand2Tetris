/**
 * 4-bit carry look ahead adder.
 */

CHIP FullAdder4 {
    IN a[4], b[4], c0;
    OUT sum[4], carry;

    PARTS:
   // Put you code here:
   FullAdderB(a=a[0], b=b[0], c=c0, g=g0, p=p0, sum=sum[0]);
   FullAdderB(a=a[1], b=b[1], c=c1, g=g1, p=p1, sum=sum[1]);
   FullAdderB(a=a[2], b=b[2], c=c2, g=g2, p=p2, sum=sum[2]);
   FullAdderB(a=a[3], b=b[3], c=c3, g=g3, p=p3, sum=sum[3]);

   //Calculate c1
    And(a=p0, b=c0, out=c1a);
    Or(a=g0, b=c1a, out=c1);

    //Calculate c2
    And(a=p1, b=c1a, out=c2a);
    And(a=g0, b=p1, out=c2b);
    Or(a=g1, b=c2b, out=c2c);
    Or(a=c2c, b=c2a, out=c2);
    
    //Calculate c3
    And(a=c2a, b=p2, out=c3a);
    And(a=c2b, b=p2, out=c3b);
    And(a=g1, b=p2, out=c3c);
    Or(a=g2, b=c3c, out=c3d);
    Or(a=c3b, b=c3a, out=c3e);
    Or(a=c3d, b=c3e, out=c3);

    //Calculate c4
    And(a=c3a, b=p3, out=c4a);
    And(a=c3b, b=p3, out=c4b);
    And(a=c3c, b=p3, out=c4c);
    And(a=g2, b=p3, out=c4d);
    Or(a=g3, b=c4d, out=c4e);
    Or(a=c4b, b=c4a, out=c4f);
    Or(a=c4e, b=c4f, out=c4g);
    Or(a=c4g, b=c4c, out=carry);
}